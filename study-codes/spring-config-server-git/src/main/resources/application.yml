server:
  port: 8999

spring:
  application:
    name: spring-config-server-git

  # 配置完直接启动即可，访问方式：
  # http://localhost:8999/{spring.application.name}/{spring.profiles.active}/{git分支}
  # {spring.application.name} 必需，就是具体项目的项目名（yml里配置的），不是config-server的哦
  # {spring.profiles.active} 必需，就是具体项目的环境（yml里配置的），注：具体项目可以不配置，使用默认值
  # {git分支} 可空，git配置文件所在的分支，默认使用下面的default-label
  #
  # 注意：server项目启动后，会把git项目clone到本地，如windows系统会在 C:\Users\xxx\AppData\Local\Temp\config-repo-xxx
  cloud:
    config:
      server:
        git:
          uri: https://github.com/youbl/study   # git项目的url地址，支持gitlab、github、gitee等
          search-paths: spring-configs          # git项目下，存放yml配置文件的子目录
          username: beinet                      # git账号
          password: 123456                      # git密码
          default-label: master   # 默认会获取main分支，不存在就报错： No such label: main
          timeout: 6              # 读取git的超时时间，默认5秒
          #clone-on-start: true    # 启动时把配置clone到本地，默认false，第一次访问会比较慢
          # basedir:
          #refresh-rate: 100         # 服务从git更新配置的时间间隔，单位秒，默认值0，表示每次请求都去获取最新配置

    # 启用bus后，对应的消息队列（如kafka）会自动创建一个topic springCloudBus
    # 使用 curl -X POST http://localhost:8999/actuator/busrefresh 会触发消息推送到这个topic，供client使用
    bus:
      refresh:
        enabled: true
    stream: # client端也要放在application.yml里，不能放bootstrap.yml里
      bindings:
        springCloudBusInput:
          destination: "newtopicname"  # 修改配置中心刷新用的kafka topic，默认是 springCloudBus
        springCloudBusOutput:
          destination: "newtopicname"  # 修改配置中心刷新用的kafka topic，默认是 springCloudBus

  kafka:
    bootstrap-servers: 10.1.2.3:9092

management:
  endpoints:
    web:
      exposure:
        include: "*"

beinet:
  config: 我是一个本地配置项